// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Layout(body templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\" x-data><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><script src=\"https://unpkg.com/htmx.org@2.0.7\"></script><script src=\"https://unpkg.com/alpinejs\" defer></script><link href=\"/static/css/output.css\" rel=\"stylesheet\"><link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css\"><script src=\"https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/es.js\"></script></head><body class=\"h-screen w-screen flex items-center justify-center bg-black relative\"><script src=\"https://cdn.jsdelivr.net/npm/flatpickr\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = body.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script>\n function initFlatpickr() {\n   flatpickr(\"#due-date\", {\n     dateFormat: \"Y-m-d\",     // format you save to DB\n     altInput: true,          // pretty UI\n     altFormat: \"d/m/Y\",      // user sees this format\n     defaultDate: document.querySelector(\"#due-date\")?.value || null,\n     locale: \"es\",            // Spanish\n   });\n }\n\n document.addEventListener(\"DOMContentLoaded\", initFlatpickr);\n document.addEventListener(\"htmx:afterSwap\", initFlatpickr);\n</script><script>\nfunction fileManager() {\n  return {\n    files: {},\n\n    initExisting(urls) {\n      urls.forEach(url => {\n        const name = url.split('/').pop();\n        this.files[name] = url;\n      });\n      this.syncUploads();\n    },\n\n    addFiles(list) {\n      Array.from(list).forEach(f => {\n        this.files[f.name] = f;\n      });\n      this.syncUploads();\n    },\n\n    remove(name) {\n      delete this.files[name];\n      this.syncUploads();\n    },\n\n    syncUploads() {\n      const dt = new DataTransfer();\n      for (const value of Object.values(this.files)) {\n        if (value instanceof File) dt.items.add(value);\n      }\n      this.$refs.uploads.files = dt.files;\n    }\n  }\n}\n</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
