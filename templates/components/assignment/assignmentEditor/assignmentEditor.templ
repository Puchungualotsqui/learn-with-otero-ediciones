package assignmentEditor

import (
	"frontend/dto"
	"encoding/json"
	"frontend/helper"
	"strconv"
)

templ AssignmentEditor(a dto.Assignment, classId int) {
	{{
		// Marshal assignment content ([]string) to JSON
		files := a.Content
	    if files == nil {
	        files = []string{}
	    }
	    filesJSON := string(helper.Must(json.Marshal(files)))
	}}

		<form
		  hx-post={"/" + strconv.Itoa(classId) + "/asignaciones/update?id=" + strconv.Itoa(a.Id)}
		  hx-target="#assignment-detail"
		  hx-swap="innerHTML"
		  enctype="multipart/form-data"
		  x-data="fileManager()"
		  x-init={"initExisting(" + filesJSON + ")"}
		  class="flex flex-col h-full overflow-y-scroll px-4"
		>

		<!-- Title -->
		<div class="mb-6">
			<label class="block text-sm font-medium text-gray-700 mb-1">Título</label>
			<input type="text" name="title" value={a.Title}
				class="w-full px-3 py-2 border border-gray-300 rounded-md text-gray-700 focus:outline-none focus:border-red-500"/>
		</div>

		<!-- Description -->
		<div class="flex-1 flex flex-col mb-6">
			<label class="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
			<textarea name="description"
				class="flex-1 w-full px-3 py-2 border border-gray-300 rounded-md text-gray-700 resize-none overflow-y-auto focus:outline-none focus:border-red-500">{a.Description}</textarea>
		</div>

		<!-- Due date -->
		<div class="mb-8">
			<label class="block text-sm font-medium text-gray-700 mb-1">Fecha de entrega</label>
			<input id="due-date"
			       type="text"
			       name="due_date"
			       value={a.DueDate}
			       placeholder="Selecciona fecha"
			       class="w-full max-w-xs px-3 py-2 border border-gray-300 rounded-md text-gray-700 bg-white focus:outline-none focus:border-red-500" />
		</div>

		<!-- Files section -->
		<div class="mb-6">
			<label class="block text-sm font-medium text-gray-700 mb-1">Archivos o enlaces</label>

			<ul class="space-y-2 mb-4">
			  <template x-for="(value, name) in files" :key="name">
			    <li class="flex items-center justify-between px-3 py-2 rounded bg-gray-50 text-sm text-gray-800 border border-gray-200">

			      <!-- Already uploaded (URL) -->
			      <template x-if="typeof value === 'string'">
			        <div class="flex-1 flex justify-between gap-2">
		          <a :href="value"

						 target="_blank"
			             class="truncate text-red-600 hover:underline"
			             x-text="name"></a>
			          <input type="hidden" name="keep[]" :value="value">
			        </div>
			      </template>

			      <!-- Pending upload (File) -->
			      <template x-if="value instanceof File">
			        <span class="truncate text-gray-800" x-text="name"></span>
			      </template>

			      <!-- Remove button -->
			      <button type="button"
			              @click="remove(name)"
			              class="ml-2 text-red-600 hover:text-red-800 cursor-pointer">
			        ✕
			      </button>
			    </li>
			  </template>
			</ul>

			</div>

			<!-- Dropzone -->
			<div
			    class="w-full border-2 border-dashed border-gray-300 rounded-lg p-6 text-center text-gray-500 cursor-pointer hover:border-red-400 hover:bg-red-50 transition"
			    @dragover.prevent
			    @drop.prevent="addFiles($event.dataTransfer.files)"
			    @click="$refs.picker.click()"
			  >
			    <p>Arrastra archivos aquí o haz clic para seleccionarlos</p>
			    <input type="file" x-ref="picker" multiple class="hidden" @change="addFiles($event.target.files)">
			  </div>

			  <!-- Hidden input that HTMX will actually send -->
			  <input type="file" name="uploads" x-ref="uploads" class="hidden" multiple>

			  <div class="mt-4 flex justify-end">
			    <button type="submit" class="btn bg-red-600 text-white">Guardar</button>
			  </div>
			</form>
}
